Recursive Solution :-

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        dfs(root,list);
        return list;
    }
    private void dfs(TreeNode root , List<Integer> list){
        if(root == null)
            return;
        list.add(root.val);
        dfs(root.left,list);
        dfs(root.right,list);
    }
}


Iterative Solution :-

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        dfs(root,list);
        return list;
    }
    private void dfs(TreeNode root , List<Integer> list){
        if(root==null)
            return;
        Stack<TreeNode> helper = new Stack<>();
        helper.push(root);
        while(!helper.isEmpty()){
            TreeNode temp = helper.pop();
            list.add(temp.val);
            if(temp.right!=null){
                helper.push(temp.right);
            }
            if(temp.left!=null){
                helper.push(temp.left);
            }
        }
    }
}
