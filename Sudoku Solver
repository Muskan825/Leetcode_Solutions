//  normalization  :-  to find the new row and column of the grid
//  ex.  for [i][j] =>  [ (i/3)*3 ] [ (j/3) * 3 ]
//  B [ nR + i/3 ] [ nC + i%3 ]


class Solution {
    public void solveSudoku(char[][] board) {
        int row = board.length;
        if(board == null || row == 0){
            return;
        }
        solve(board);
    }
    private boolean solve(char[][] board){
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == '.') {
                    for (char c = '1'; c <= '9'; c++) {     // try from chararcter 1 to 9 , if it's valid or not
                        if (isValid(board, i, j, c)) {
                            board[i][j] = c;        // put c for this cell  
                            if (solve(board)) {
                                return true;        // if it's the solution return true
                            } else {
                                board[i][j] = '.';      // Otherwise go back
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    private boolean isValid(char[][] board, int row, int col, char c) {
        int nRow = 3 * (row/3);     // to change order of sequence of precedence, as here * and / are both of same preced.
        int nCol = 3 * (col/3);     // normalized col
        for (int i = 0; i < 9; i++) {
            if (board[i][col] != '.' && board[i][col] == c) {       // checking rows
                return false;
            }
            if (board[row][i] != '.' && board[row][i] == c) {       // checking columns
                return false;
            }
            if (board[nRow + i / 3][nCol + i % 3] != '.' && 
                board[nRow + i / 3][nCol + i % 3] == c) {         // checking 3*3 grid or block
                return false; 
            }
        }
        return true;
    }
}
